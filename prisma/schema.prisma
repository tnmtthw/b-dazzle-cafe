generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id @default(uuid()) @db.Uuid
  name        String
  email       String       @unique
  password    String
  role        String       @default("Unverified")
  phone       String?
  bio         String?
  address     String?
  resetToken  String?      @unique
  createdAt   DateTime     @default(now())

  cartItems CartItem[]
  orders    Order[]
  passwordResetToken PasswordResetToken?
}

model Product {
  id          String       @id @default(uuid()) @db.Uuid
  image       String
  name        String
  category    String?      @default("Espresso")
  description String
  price       Int
  sales       Int?         @default(0)
  stock       String       @default("In Stock")
  status      Status       @default(Active)
  createdAt   DateTime     @default(now())

  cartItems   CartItem[]
  orderItems  OrderItem[]
}

enum Status {
  Active
  Inactive
}

model CartItem {
  id        String    @id @default(uuid()) @db.Uuid
  userId    String    @db.Uuid
  productId String    @db.Uuid
  quantity  Int       @default(1)
  createdAt DateTime  @default(now())

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id        String       @id @default(uuid()) @db.Uuid
  userId    String       @db.Uuid
  total     Int
  status    String       @default("pending") 
  createdAt DateTime     @default(now())

  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     OrderItem[]
}

model OrderItem {
  id        String     @id @default(uuid()) @db.Uuid
  orderId   String     @db.Uuid
  productId String     @db.Uuid
  quantity  Int
  price     Int

  order     Order      @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model PasswordResetToken {
  id        String    @id @default(uuid()) @db.Uuid
  userId    String    @unique @db.Uuid
  token     String    @unique
  expiresAt DateTime
  createdAt DateTime  @default(now())

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

